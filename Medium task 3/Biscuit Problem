class biscuit
{
    static int max_biscuit(int[,] biscuit,
                            int m, int n)
    {

        
        int[,] biscuitMatrix = new int[m, n];

        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                biscuitMatrix[i, j] = 0;

        for (int col = n - 1; col >= 0; col--)
        {
            for (int row = 0; row < m; row++)
            {
                
                int right = (col == n - 1) ? 0 :
                            biscuitMatrix[row, col + 1];

                
                int diagonal_up = (row == 0 || col == n - 1)
                            ? 0 : biscuitMatrix[row - 1, col + 1];

                
                int diagonal_down = (row == m - 1 || col == n - 1)
                                ? 0 : biscuitMatrix[row + 1, col + 1];

                
                biscuitMatrix[row, col] = biscuit[row, col] +
                                Math.Max(right, Math.Max(diagonal_up,
                                                    diagonal_down));
            }
        }

        
        int res = biscuitMatrix[0, 0];
        for (int i = 1; i < m; i++)
            res = Math.Max(res, biscuitMatrix[i, 0]);
        return res;
    }

   
    static void Main()
    {
        int[,] biscuit = new int[,]{{0 ,1, 4, 2, 8, 2 },
    { 4, 3, 5, 6, 0, 4 },
    { 1 ,2 ,4 ,1, 4, 6 },
        { 2 ,0 ,7, 3 ,2 ,2 },
    { 3, 1 ,5 ,9, 2, 4 },
    { 2, 7 ,0, 8, 5 ,1 } };
    
                                
        int m = 6, n = 6;
        Console.Write(max_biscuit(biscuit, m, n));
    }
}
